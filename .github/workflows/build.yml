name: CI

on:
  workflow_dispatch: # allows manual triggering
    inputs:
      create_release:
        description: 'Create new release'
        required: true
        type: boolean
  push:
    paths: ['.github/workflows/**', '**/CMakeLists.txt', '**/Makefile', '**/*.h', '**/*.c', '**/*.cpp']
  pull_request:
    types: [opened, synchronize, edited, reopened, review_requested, ready_for_review]
    paths: ['**/CMakeLists.txt', '**/Makefile', '**/*.h', '**/*.c', '**/*.cpp']

env:
 BRANCH_NAME: ${{ github.head_ref || github.ref_name }}

jobs:
  ubuntu-latest-make:
    runs-on: ubuntu-20.04

    steps:
      - name: Clone
        id: checkout
        uses: actions/checkout@v1

      - name: Dependencies
        id: depends
        run: |
          sudo apt-get update
          sudo apt-get install build-essential
          wget https://boostorg.jfrog.io/artifactory/main/release/1.81.0/source/boost_1_81_0.tar.gz
          tar xzf boost_1_81_0.tar.gz -C . --strip-components=1 boost_1_81_0/boost

      - name: Build
        id: make_build
        run: |
          make

      - name: Zip executables
        run: zip llama.http-${{ env.BRANCH_NAME }}-${{ steps.commit.outputs.short }}-bin-linux-x64.zip main quantize perplexity

      - name: Clear
        run: |
           rm -rf boost
           rm boost_1_81_0.tar.gz
          
      - name: Archive production artifacts
        uses: actions/upload-artifact@v3
        with:
          name: linux
          path: |
            llama.http-${{ env.BRANCH_NAME }}-${{ steps.commit.outputs.short }}-bin-linux-x64.zip


  windows-latest:
    runs-on: windows-latest

    strategy:
      matrix:
        include:
         - build: 'avx2'
           defines: ''
         - build: 'avx'
           defines: '-DLLAMA_AVX2=OFF'
         - build: 'avx512'
           defines: '-DLLAMA_AVX512=ON'

    steps:
      - name: Clone
        id: checkout
        uses: actions/checkout@v1

      - name: Dependencies
        id: depends
        run: |
          Invoke-WebRequest -Uri https://boostorg.jfrog.io/artifactory/main/release/1.81.0/source/boost_1_81_0.zip -OutFile boost_1_81_0.zip
          7z x boost_1_81_0.zip boost_1_81_0/boost/*
          mv boost_1_81_0/boost/ boost

      - name: Build
        id: cmake_build
        run: |
          mkdir build
          cd build
          cmake .. ${{ matrix.defines }}
          cmake --build . --config Release

      - name: Check AVX512F support
        id: check_avx512f
        if: ${{ matrix.build == 'avx512' }}
        continue-on-error: true
        run: |
          echo "TODO: check avx512f"

      - name: Test
        id: cmake_test
        if: ${{ matrix.build != 'avx512' || env.HAS_AVX512F == '1' }} # Test AVX-512 only when possible
        run: |
          cd build
          ctest -C Release --output-on-failure

      - name: Get commit hash
        id: commit
        if: ${{ ( github.event_name == 'push' && github.ref == 'refs/heads/master' ) || github.event.inputs.create_release == 'true' }}
        uses: pr-mpt/actions-commit-hash@v2

      - name: Pack artifacts
        id: pack_artifacts
        if: ${{ ( github.event_name == 'push' && github.ref == 'refs/heads/master' ) || github.event.inputs.create_release == 'true' }}
        run: |
          7z a llama.http-${{ env.BRANCH_NAME }}-${{ steps.commit.outputs.short }}-bin-win-${{ matrix.build }}-x64.zip .\build\bin\Release\*

      - name: Upload artifacts
        if: ${{ ( github.event_name == 'push' && github.ref == 'refs/heads/master' ) || github.event.inputs.create_release == 'true' }}
        uses: actions/upload-artifact@v3
        with:
          path: |
            llama.http-${{ env.BRANCH_NAME }}-${{ steps.commit.outputs.short }}-bin-win-${{ matrix.build }}-x64.zip

  release:
    if: ${{ ( github.event_name == 'push' && github.ref == 'refs/heads/master' ) || github.event.inputs.create_release == 'true' }}

    runs-on: ubuntu-latest

    needs:
      - ubuntu-latest-make
      - windows-latest

    steps:
      - name: Download artifacts
        id: download-artifact
        uses: actions/download-artifact@v3

      - name: Get commit hash
        id: commit
        uses: pr-mpt/actions-commit-hash@v2

      - name: Create release
        id: create_release
        uses: anzz1/action-create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.BRANCH_NAME }}-${{ steps.commit.outputs.short }}

      - name: Upload release
        id: upload_release
        uses: actions/github-script@v3
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const path = require('path');
            const fs = require('fs');
            const release_id = '${{ steps.create_release.outputs.id }}';
            for (let file of await fs.readdirSync('./artifact')) {
              if (path.extname(file) === '.zip') {
                console.log('uploadReleaseAsset', file);
                await github.repos.uploadReleaseAsset({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  release_id: release_id,
                  name: file,
                  data: await fs.readFileSync(`./artifact/${file}`)
                });
              }
            }
